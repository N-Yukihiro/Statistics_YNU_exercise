---
title: "確率分布"
format: html
---

### 確率分布とRの関数

Rにはデフォルトで様々な確率分布が関数として備わっている.
正規分布なら`norm`, 二項分布なら`binom`.
先頭に`d`がつけば確率密度, `p`がつけば累積分布, `q`がつけば確率点を求める.
先頭に`r`がつけば指定の分布に従った乱数を生成する.
引数として各分布に必要なパラメーターを指定する.

例えば, 下記のコードは正規分布の累積分布を表す(詳細は後述).

```{r}
pnorm(q = 0, mean = 0, sd = 1)
```

### 二項分布の確率質量1

二項分布の確率質量を求めるには`dbinom()`関数を用いる.
コイン投げを例に説明すると, 表と裏の出る確率が等しい(`prob = 0.5`)コイン`size = 4`回投げたときに, 表が`x = 1`回出る確率を求める.

```{r}
dbinom(x = 1, size = 4, prob = 0.5)
```

二項分布の定義に従って確率質量を求める.
`choose()`関数を用いて組み合わせを求める.

```{r}
choose(n = 4, k = 1) * 0.5^1 * (1 - 0.5)^(4 - 1)
```

### 二項分布の確率質量2

表が出る確率をそれぞれ求める.

```{r}
dbinom(x = 0:4, size = 4, prob = 0.5)
```

確率質量の総和は1となる.

```{r}
sum(dbinom(x = 0:4, size = 4, prob = 0.5))
```


### 二項分布の累積分布

二項分布の累積分布を求めるには`pbinom()`関数を用いる.
表と裏の出る確率が等しい(`prob = 0.5`)コインを`size = 4`回投げたときに, 表が`q = 1`回以下出る確率を求める.

```{r}
pbinom(q = 1, size = 4, prob = 0.5)
```

累積分布は実際に確率質量関数の総和であることがわかる.

```{r}
sum(dbinom(x = 0:1, size = 4, prob = 0.5))
```

### 二項分布の累積分布を用いた例

0.5%の確率でウルトラレアのキャラクターが出るガチャを100回引いて, 2体以上ウルトラレアを得る確率は次のように求める.

```{r}
1 - pbinom(q = 1, size = 100, prob = 0.005)
```

引数で`lower.tail = FALSE`と指定すれば上側確率($P[X > x]$)が求められる.

```{r}
pbinom(q = 1, size = 100, prob = 0.005, lower.tail = FALSE)
```

### 二項分布とグラフ1

0.5%の確率でウルトラレアのキャラクターが出るガチャを100回引いて, ウルトラレアのキャラクターを引く回数をグラフにする.
確率分布関数から理論値を描画するには, `ggplot2::stat_function()`関数を利用する.
`fun = `で確率分布を指定し, `args =` で確率分布を求める関数の引数を`list()`関数を用いて指定する.

```{r}
library(pacman)
pacman::p_load(ggplot2)
ggplot(data = NULL) +
  aes(xmin = 0,
      xmax = 5) +
  stat_function(
    fun  = dbinom,
    args = list(size = 100,
                prob = 0.005),
    geom = "bar")
```

### 二項分布とグラフ2

コインを10回投げ, 10回表が向いた時にどのような確率を持つコインだともっともらしいかを描画する.

```{r}
ggplot(data = NULL) +
  aes(xmin = 0, 
      xmax = 1) +
  stat_function(
    fun  = dbinom,
    args = list(x    = 10, 
                size = 10))
```

### 正規分布の確率密度

正規分布の確率密度を求めるには, `dnorm()`関数を利用する.
`*norm()`関数ではデフォルトで, 標準正規分布が指定されている.

```{r}
dnorm(x = 0)
```

標準正規分布の確率密度関数の定義に従って計算を行う.

```{r}
1 / sqrt(2 * pi) * exp(- 0^2 / 2)
```

### 正規分布の確率密度関数とグラフ

正規分布を描画するには, stat_function()関数の引数としてfun = dnormを指定する.

```{r}
ggplot(data = NULL) +
  aes(xmin = -4,
      xmax = 4) +
  stat_function(
    fun = dnorm)
```

### 正規分布の確率密度関数と平均

標準正規分布を点線で, 平均1標準偏差1の正規分布を実線で描画し, 比較を行う.
形は変えずに1だけ右に移動したグラフとなっていることがわかる.

```{r}
ggplot(data = NULL) +
  aes(xmin = -4,
      xmax = 5) +
  stat_function(
    fun      = dnorm, 
    linetype = "dashed") +
  stat_function(
    fun  = dnorm, 
    args = list(mean = 1))
```

### 正規分布の確率密度関数と標準偏差

標準正規分布を点線で, 平均0標準偏差0.5の正規分布を実線で描画し, 比較を行う.
位置は変えずによりシャープなグラフとなっていることがわかる.

```{r}
ggplot(data = NULL) +
  aes(xmin = -4,
      xmax = 4) +
  stat_function(
    fun      = dnorm, 
    linetype = "dashed") +
  stat_function(
    fun  = dnorm, 
    args = list(sd = 0.5))
```

### 正規分布の累積分布

正規分布の累積分布を求めるには, `pnorm()`関数を利用する.
$\Phi(-1.96)$を求める.

```{r}
pnorm(q = -1.96)
```

### 定義に従って標準正規分布の累積分布を求める(Advanced)

まず, 標準正規分布の確率密度関数を関数として定義する.
`function(x){}`で関数を定義する.
`(x)`が定義した関数が取る引数であり, `{}`内に関数の定義を記述する.

```{r}
 f <- function(x){
   1 / sqrt(2 * pi) * exp(- x^2 / 2)
 } 
```

次に, 数値積分を行う`integrate()`関数を利用して積分を行い累積分布を求める.
第2引数で下端, 第3引数で上端を指定する.
定義した関数`f()`の`x`を指定している.

```{r}
integrate(f, -1.96, 1.96)
```

### 数値積分(Advanced)

1変数関数の積分の近似解を求める.
リーマン積分の考え方に準じて数値積分を行う関数を作成する.
```{r}
approx_integation <- function(x_range, f) {
  N      = length(x_range)
  delta  = x_range[2] - x_range[1]
  result = 0
  for (i in 1:N-1){
    result = result + f(x_range[i]) * delta
  }
  result
}
```

### 数値積分の実行(Advanced)

積分する区間を等間隔に分け、関数を実行する.

```{r}
x_range <- seq(from       = -1.96, 
               to         = 1.96,
               length.out = 100)
approx_integation(x_range, f)
```


### 正規分布の累積分布関数とグラフ

累積分布関数を描画するには`stat_function()`関数の引数で`fun = pnorm`を指定する.

```{r}
ggplot(data = NULL) +
  aes(xmin = -3, 
      xmax = 3) +
  stat_function(fun = pnorm)
```

### 正規分布の確率点

正規分布の確率点(累積分布関数の逆関数)を求めるには`qnorm()`関数を用いる.
正規分布の平均を与えるには引数で`mean =` を指定し, 標準偏差を与えるには`sd =` を指定する.

```{r}
qnorm(p = 0.025, mean = 0, sd = 1)
```

### 確率密度関数と確率点

正規分布の確率密度関数のグラフに確率点を求めて線を引く.
まず`dnorm()`関数で標準正規分布のグラフを描き, その上に`geom_vline()`関数で縦線を引く.
引数の`xintercept`で確率点を求める`qnorm()`関数を利用する.

```{r}
ggplot(data = NULL) +
  aes(xmin = -3, 
      xmax = 3) +
  stat_function(
    fun = dnorm) +
  geom_vline(
    xintercept = qnorm(p = 0.025),
    colour     = "red")
```

